name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ steps.version.outputs.VERSION }}
      run: |
        # Set binary name with OS and architecture
        BINARY_NAME=websearch-mcp-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME=${BINARY_NAME}.exe
        fi
        
        # Build with version information
        CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${{ steps.version.outputs.VERSION }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${{ github.sha }}" \
          -o ${BINARY_NAME} \
          .
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r websearch-mcp-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip \
            ${BINARY_NAME} \
            README.md \
            USAGE.md \
            TABNINE_SETUP.md \
            TABNINE_QUICK_REFERENCE.md \
            mcp-server-config.json \
            examples/
        else
          tar -czf websearch-mcp-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz \
            ${BINARY_NAME} \
            README.md \
            USAGE.md \
            TABNINE_SETUP.md \
            TABNINE_QUICK_REFERENCE.md \
            mcp-server-config.json \
            examples/
        fi
        
        # Create checksums
        if [ "${{ matrix.goos }}" = "windows" ]; then
          sha256sum websearch-mcp-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip > websearch-mcp-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip.sha256
        else
          sha256sum websearch-mcp-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz > websearch-mcp-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz.sha256
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          *.tar.gz
          *.zip
          *.sha256

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          websearch-mcp
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.VERSION }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
          GIT_COMMIT=${{ github.sha }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-release, docker-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find ./artifacts -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" | while read file; do
          cp "$file" release-assets/
        done

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          # Generate changelog from commits since last tag
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Initial release of WebSearch MCP Server" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: WebSearch MCP Server ${{ steps.version.outputs.VERSION }}
        body: |
          # WebSearch MCP Server ${{ steps.version.outputs.VERSION }}
          
          A Model Context Protocol (MCP) server that provides web search capabilities using DuckDuckGo. Designed for seamless integration with Tabnine Agents and other MCP-compatible AI systems.
          
          ## Quick Start
          
          1. Download the appropriate binary for your platform
          2. Create a `.mcp_servers` configuration file:
          ```json
          {
            "mcpServers": {
              "websearch": {
                "command": "./websearch-mcp",
                "args": [],
                "env": {
                  "PORT": "8080"
                }
              }
            }
          }
          ```
          3. Start using with your Tabnine Agent!
          
          ## Docker
          
          ```bash
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          ```
          
          ## Checksums
          
          All binaries include SHA256 checksums for verification.
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Documentation
          
          - [Setup Guide](https://github.com/${{ github.repository }}/blob/${{ steps.version.outputs.VERSION }}/TABNINE_SETUP.md)
          - [Quick Reference](https://github.com/${{ github.repository }}/blob/${{ steps.version.outputs.VERSION }}/TABNINE_QUICK_REFERENCE.md)
          - [Usage Documentation](https://github.com/${{ github.repository }}/blob/${{ steps.version.outputs.VERSION }}/USAGE.md)
        files: release-assets/*
        draft: false
        prerelease: false