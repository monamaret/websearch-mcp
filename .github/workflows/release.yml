
name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ steps.version.outputs.VERSION }}
      run: |
        # Set binary name with OS and architecture
        BINARY_NAME=websearch-mcp-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}
        
        # Build with version information
        CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${{ steps.version.outputs.VERSION }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${{ github.sha }}" \
          -o ${BINARY_NAME} \
          .
        
        # Create archive
        tar -czf websearch-mcp-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz \
          ${BINARY_NAME} \
          README.md

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ matrix.goos }}-${{ matrix.goarch }}
        path: "*.tar.gz"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find ./artifacts -name "*.tar.gz" | while read file; do
          cp "$file" release-assets/
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: WebSearch MCP Server ${{ steps.version.outputs.VERSION }}
        body: |
          # WebSearch MCP Server ${{ steps.version.outputs.VERSION }}
          
          A Model Context Protocol (MCP) server that provides web search capabilities using DuckDuckGo.
          
          ## Quick Start
          
          1. Download the appropriate binary for your platform
          2. Create a `.mcp_servers` configuration file
          3. Start using with your MCP client!
          
          ## Documentation
          
          See the README.md for full setup and usage instructions.
        files: release-assets/*
        draft: false
        prerelease: false
