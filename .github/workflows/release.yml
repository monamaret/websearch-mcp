
name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        VERSION: ${{ steps.version.outputs.VERSION }}
      run: |
        # Build single optimized binary with version information
        CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${{ steps.version.outputs.VERSION }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${{ github.sha }}" \
          -o websearch-mcp \
          .

    - name: Create archive
      run: |
        tar -czf websearch-mcp-${{ steps.version.outputs.VERSION }}.tar.gz \
          websearch-mcp \
          README.md

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: "*.tar.gz"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        cp ./artifacts/*.tar.gz release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: WebSearch MCP Server ${{ steps.version.outputs.VERSION }}
        body: |
          # WebSearch MCP Server ${{ steps.version.outputs.VERSION }}

          A Model Context Protocol (MCP) server that provides web search capabilities using DuckDuckGo.

          ## Quick Start

          1. Download the binary from the Assets section below
          2. Make it executable (chmod +x ./websearch-mcp)
          3. Create a `.mcp_servers` configuration file
          4. Start using with your MCP client!

          ## Documentation

          See the README.md for full setup and usage instructions.
        files: release-assets/*
        draft: false
        prerelease: false
